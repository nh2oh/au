#include "gtest/gtest.h"
#include "..\aulib\input\midi\midi_raw.h"
#include "midi_raw_test_data.h"
#include <vector>
#include <cstdint>


// 
// is_midi_status_byte()
//
TEST(is_midi_status_byte, IsMIDIStatusByte) {
	std::vector<unsigned char> invalid_status_byte {
		0x00u,0x01u,0x02u,0x09u,0x0Au,0x0Fu,
		0x70u,0x71u, 0x78u,0x79u,0x7Au,0x7Fu,
		0xF0u,0xF1u,0xF2u,0xF7u,0xF9u,0xFAu,0xFFu
	};
	std::vector<unsigned char> valid_status_byte {
		0x80u,0x81u,0x82u,0x89u,0x8Au,0x8Fu,
		0x90u,0x91u, 0x98u,0x99u,0x9Au,0x9Fu,
		0xA0u,0xA1u,0xA2u,0xA7u,0xA9u,0xAAu,0xAFu,
		0xB0u,0xB1u,0xB2u,0xB7u,0xB9u,0xBAu,0xBFu,
		0xE0u,0xE1u,0xE2u,0xE7u,0xE9u,0xEAu,0xEFu
	};
	for (const auto& e : invalid_status_byte) {
		EXPECT_FALSE(is_midi_status_byte(e));
	}
	for (const auto& e : valid_status_byte) {
		EXPECT_TRUE(is_midi_status_byte(e));
	}
}


// 
// is_midi_data_byte()
//
TEST(is_midi_data_byte, IsMIDIDataByte) {
std::vector<unsigned char> invalid_data_byte {
		0x80u,0x81u,0x82u,0x89u,0x8Au,0x8Fu,
		0x90u,0x91u, 0x98u,0x99u,0x9Au,0x9Fu,
		0xA0u,0xA1u,0xA2u,0xA7u,0xA9u,0xAAu,0xAFu,
		0xB0u,0xB1u,0xB2u,0xB7u,0xB9u,0xBAu,0xBFu,
		0xE0u,0xE1u,0xE2u,0xE7u,0xE9u,0xEAu,0xEFu,
		0xF0u,0xF1u,0xF2u,0xF7u,0xF9u,0xFAu,0xFFu
	};
	std::vector<unsigned char> valid_data_byte {
		0x00u,0x01u,0x02u,0x09u,0x0Au,0x0Fu,
		0x70u,0x71u, 0x78u,0x79u,0x7Au,0x7Fu,
	};	
	for (const auto& e : invalid_data_byte) {
		EXPECT_FALSE(is_midi_data_byte(e));
	}
	for (const auto& e : valid_data_byte) {
		EXPECT_TRUE(is_midi_data_byte(e));
	}
}

