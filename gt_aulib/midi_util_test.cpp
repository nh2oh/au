#include "gtest/gtest.h"
#include "..\aulib\input\midi_util.h"
#include <vector>
#include <array>


// midi_interpret_vl_field() and all the examples from p.131 of the MIDI std.  
// Note that the 'field' array in the test struct is always 4 long; 
// midi_interpret_vl_field() has to be able to autodetect the end.  
TEST(midi_util_tests, InterpretVLFieldStdP131Exs) {
	struct tests {
		std::array<unsigned char,4> rep {0x00,0x00,0x00,0x00};
		int32_t ans {};
	};
	std::vector<tests> ln1_set {
		{{0x00,0x00,0x00,0x00},0x00},{{0x40,0x00,0x00,0x00},0x40},{{0x7F,0x00,0x00,0x00},0x7F}
	};
	for (const auto& e : ln1_set) {
		auto res = midi_interpret_vl_field(&(e.rep[0]));
		EXPECT_EQ(res.N,1);
		EXPECT_EQ(res.val,e.ans);
	}

	std::vector<tests> ln2_set {
		{{0x81,0x00,0x00,0x00},0x80},{{0xC0,0x00,0x00,0x00},0x2000},{{0xFF,0x7F,0x00,0x00},0x3FFF}
	};
	for (const auto& e : ln2_set) {
		auto res = midi_interpret_vl_field(&(e.rep[0]));
		EXPECT_EQ(res.N,2);
		EXPECT_EQ(res.val,e.ans);
	}

	std::vector<tests> ln3_set {
		{{0x81,0x80,0x00,0x00},0x4000},{{0xC0,0x80,0x00,0x00},0x100000},{{0xFF,0xFF,0x7F,0x00},0x1FFFFF}
	};
	for (const auto& e : ln3_set) {
		auto res = midi_interpret_vl_field(&(e.rep[0]));
		EXPECT_EQ(res.N,3);
		EXPECT_EQ(res.val,e.ans);
	}

	std::vector<tests> ln4_set {
		{{0x81,0x80,0x80,0x00},0x00200000},{{0xC0,0x80,0x80,0x00},0x08000000},
		{{0xFF,0xFF,0xFF,0x7F},0x0FFFFFFF}
	};
	for (const auto& e : ln4_set) {
		auto res = midi_interpret_vl_field(&(e.rep[0]));
		EXPECT_EQ(res.N,4);
		EXPECT_EQ(res.val,e.ans);
	}
}


// midi_encode_vl_field() and all the examples from p.131 of the MIDI std.  
TEST(midi_util_tests, EncodeVLFieldStdP131Exs) {
	struct tests {
		std::array<unsigned char,4> ans {0x00,0x00,0x00,0x00};
		int32_t num {};
	};
	std::vector<tests> all_tests {
		{{0x00,0x00,0x00,0x00},0x00},
		{{0x40,0x00,0x00,0x00},0x40},
		{{0x7F,0x00,0x00,0x00},0x7F},

		{{0x81,0x00,0x00,0x00},0x80},
		{{0xC0,0x00,0x00,0x00},0x2000},
		{{0xFF,0x7F,0x00,0x00},0x3FFF},

		{{0x81,0x80,0x00,0x00},0x4000},
		{{0xC0,0x80,0x00,0x00},0x100000},
		{{0xFF,0xFF,0x7F,0x00},0x1FFFFF},

		{{0x81,0x80,0x80,0x00},0x00200000},
		{{0xC0,0x80,0x80,0x00},0x08000000},
		{{0xFF,0xFF,0xFF,0x7F},0x0FFFFFFF}
	};
	for (const auto& e : all_tests) {
		auto res = midi_encode_vl_field(e.num);
		EXPECT_EQ(res,e.ans) << "Failed for e.num==" << e.num <<"\n";
	}

}


// midi_raw_interpret() and a few random examples
TEST(midi_util_tests, MIDIRawInterpret) {
	struct i32_tests {
		std::array<unsigned char,4> field {0x00,0x00,0x00,0x00};
		int32_t ans {};
	};

	std::vector<i32_tests> i32_tests {
		{{0x00,0x00,0x00,0x00},0x00},
		{{0x40,0x00,0x00,0x00},0x40000000},
		{{0x00,0x00,0x00,0x40},0x00000040},
		{{0x7F,0x00,0x00,0x00},0x7F000000},
		{{0x00,0x00,0x00,0x7F},0x0000007F},

		{{0x71,0x00,0x00,0x00},0x71000000},
		{{0x70,0x00,0x00,0x00},0x70000000},
		{{0x0F,0x7F,0x00,0x00},0x0F7F0000},
		{{0x7F,0xFF,0x00,0x00},0x7FFF0000},

		{{0x71,0x80,0x00,0x00},0x71800000},
		{{0x00,0xC0,0x80,0x00},0x00C08000},
		{{0x3F,0xFF,0x7F,0x00},0x3FFF7F00},
		{{0x00,0x7F,0xFF,0x3F},0x007FFF3F},
	};
	for (const auto& e : i32_tests) {
		auto res = midi_raw_interpret<int32_t>(&(e.field[0]));
		EXPECT_EQ(res,e.ans) << "Failed for e.ans==" << e.ans <<"\n";
	}

	struct ui64_tests {
		std::array<unsigned char,8> field {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
		uint64_t ans {};
	};
	std::vector<ui64_tests> ui64_tests {
		{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},0x00},
		{{0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00},0x4000000000000000},
		{{0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00},0x0000004000000000},
		{{0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},0x7F00000000000000},
		{{0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00},0xFF00000000000000},
		{{0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00},0x0000007F00000000},

		{{0x00,0x7F,0xFF,0x3F,0x00,0x00,0x00,0x00},0x007FFF3F00000000},
		{{0x00,0x00,0x00,0x00,0x00,0x7F,0xFF,0x3F},0x00000000007FFF3F},
	};
	for (const auto& e : ui64_tests) {
		auto res = midi_raw_interpret<uint64_t>(&(e.field[0]));
		EXPECT_EQ(res,e.ans) << "Failed for e.ans==" << e.ans <<"\n";
	}

}
